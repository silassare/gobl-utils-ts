const _hasOwn = Object.hasOwnProperty, _isPlainObject = (a) => Object.prototype.toString.call(a) === '[object Object]', win = window, gobl = (win.gobl = win.gobl || {}), gobl_cache = (gobl.gobl_cache = gobl.gobl_cache || {}), gobl_class_magic_map = (gobl.gobl_class_magic_map = gobl.gobl_class_magic_map || {}), gobl_marker = '__gobl__', realJSONParse = JSON.parse, goblJSONParse = function (text, reviver) {
    return realJSONParse(text, function (key, value) {
        if (typeof reviver === 'function') {
            value = reviver(key, value);
        }
        if (_isPlainObject(value)) {
            let i = GoblEntity.toInstance(value, true);
            if (i) {
                return i;
            }
        }
        return value;
    });
}, ACTION_UNKNOWN = 0, ACTION_SAVING = 1, ACTION_DELETING = 2, ACTION_UPDATING = 3;
/**
 * GoblEntity class.
 */
export class GoblEntity {
    constructor(_initial_data = {}, _name, _prefix, _columns) {
        this._name = _name;
        this._prefix = _prefix;
        this._columns = _columns;
        this._data = {};
        this._cache = {};
        this._action = ACTION_UNKNOWN;
        let ctx = this, 
        // we use null not undefined since JSON.stringify will ignore properties with undefined value
        _def = null;
        _columns.forEach(function (col) {
            ctx._data[col] = ctx._cache[col] =
                col in _initial_data ? _initial_data[col] : _def;
        });
    }
    /**
     * Magic setter.
     *
     * @param column
     * @param value
     */
    _set(column, value) {
        if (_hasOwn.call(this._data, column)) {
            this._data[column] = value;
        }
        return this;
    }
    /**
     * Checks is the entity is clean.
     */
    isClean() {
        return Object.keys(this.toObject(true)).length === 0;
    }
    /**
     * Checks if the entity is saved.
     *
     * @param set When true the entity will be considered as saved.
     */
    isSaved(set) {
        if (set) {
            this._cache = this.toObject();
            return true;
        }
        return this.isClean();
    }
    /**
     * Checks if the entity is being saved.
     *
     * @param set When true the state will be set to saving.
     */
    isSaving(set) {
        if (arguments.length) {
            this._action = set ? ACTION_SAVING : ACTION_UNKNOWN;
        }
        return this._action === ACTION_SAVING;
    }
    /**
     * Checks if the entity is being deleted.
     *
     * @param set When true the state will be set to deleting.
     */
    isDeleting(set) {
        if (arguments.length) {
            this._action = set ? ACTION_DELETING : ACTION_UNKNOWN;
        }
        return this._action === ACTION_DELETING;
    }
    /**
     * Checks if the entity is being updated.
     *
     * @param set When true the state will be set to updating.
     */
    isUpdating(set) {
        if (arguments.length) {
            this._action = set ? ACTION_UPDATING : ACTION_UNKNOWN;
        }
        return this._action === ACTION_UPDATING;
    }
    /**
     * Hydrate the entity and set as saved when `save` is true
     */
    doHydrate(data, save = false) {
        let ctx = this, source_of_truth = this._data;
        Object.keys(data).forEach(function (k) {
            if (_hasOwn.call(source_of_truth, k)) {
                ctx[k.slice(ctx._prefix.length + 1)] = data[k];
            }
        });
        if (save) {
            this.isSaved(true);
        }
        return this;
    }
    /**
     * Returns current data in a clean new object
     *
     * if `diff` is true, returns modified columns only
     */
    toObject(diff = false) {
        let o = {};
        if (diff) {
            for (let k in this._cache) {
                if (_hasOwn.call(this._cache, k)) {
                    if (this._cache[k] !== this._data[k]) {
                        o[k] = this._data[k];
                    }
                }
            }
            return o;
        }
        for (let k in this._data) {
            if (_hasOwn.call(this._data, k)) {
                o[k] = this._data[k];
            }
        }
        return o;
    }
    /**
     * Returns some column values
     */
    toObjectSome(columns) {
        let o = {}, len = columns.length;
        for (let i = 0; i < len; i++) {
            let col = columns[i];
            if (_hasOwn.call(this._data, col)) {
                o[col] = this._data[col];
            }
            else {
                throw new Error(`Column "${col}" is not defined in "${this._name}".`);
            }
        }
        return o;
    }
    /**
     * JSON helper
     */
    toJSON() {
        let data = this.toObject();
        data[gobl_marker] = this._name;
        return data;
    }
    /**
     * Try to identify and instantiate the entity class that best matches the given data.
     *
     * @param data
     * @param cache
     */
    static toInstance(data, cache = false) {
        if (_isPlainObject(data)) {
            let entity_name = data[gobl_marker], entity, magic, old, e, cache_key;
            if (entity_name) {
                entity = gobl[entity_name];
                // maybe the entity name change
                // this is to have a clean object
                delete data[gobl_marker];
            }
            if (!entity) {
                magic = Object.keys(data)
                    .sort()
                    .join('');
                entity_name = gobl_class_magic_map[magic];
                if (entity_name) {
                    entity = gobl[entity_name];
                }
            }
            if (entity) {
                e = new entity(data);
                if (true === cache && (cache_key = e.cacheKey())) {
                    old = gobl_cache[entity_name][cache_key];
                    if (old) {
                        e = old.doHydrate(data);
                    }
                    gobl_cache[entity_name][cache_key] = e;
                }
                return e;
            }
        }
        return undefined;
    }
    /**
     * Returns a given entity cache.
     *
     * @param entity
     */
    static subCache(entity) {
        return gobl_cache[entity];
    }
    /**
     * Returns the entity cache key.
     *
     * `null` is returned when we can't have a valid cache key.
     */
    cacheKey() {
        let columns = this.identifierColumns().sort(), len = columns.length, value = '', i = 0;
        if (len === 1) {
            value = this._data[columns[0]];
        }
        else {
            for (; i < len; i++) {
                let v = this._data[columns[i]];
                if (v != null) {
                    value += v;
                }
            }
        }
        return value || null;
    }
}
export class GoblSinglePKEntity extends GoblEntity {
}
export const register = function (name, entity) {
    gobl[name] = entity;
    gobl_cache[name] = {};
    gobl_class_magic_map[entity['COLUMNS'].sort().join('')] = name;
};
export const getEntityCache = (entity_name) => gobl_cache[entity_name];
export const c_bool = (v) => {
    // @ts-ignore
    return v === null || v === undefined ? v : Boolean(v === '0' ? 0 : v);
};
export const c_int = (v) => {
    // @ts-ignore
    return v === null || v === undefined ? v : parseInt(v);
};
export const c_string = (v) => {
    // @ts-ignore
    return v === null || v === undefined ? '' : String(v);
};
JSON.parse = goblJSONParse;
//# sourceMappingURL=data:application/json;base64,