import { GOBL_ENTITY_MARKER, toInstance } from './gobl.js';
var GoblEntityState;
(function (GoblEntityState) {
    GoblEntityState[GoblEntityState["UNKNOWN"] = 0] = "UNKNOWN";
    GoblEntityState[GoblEntityState["SAVING"] = 1] = "SAVING";
    GoblEntityState[GoblEntityState["DELETING"] = 2] = "DELETING";
    GoblEntityState[GoblEntityState["UPDATING"] = 3] = "UPDATING";
})(GoblEntityState || (GoblEntityState = {}));
/**
 * GoblEntity class.
 */
export default class GoblEntity {
    _name;
    _prefix;
    _columns;
    _data = {};
    _cache = {};
    _state = GoblEntityState.UNKNOWN;
    constructor(_initialData = {}, _name, _prefix, _columns) {
        this._name = _name;
        this._prefix = _prefix;
        this._columns = _columns;
        const ctx = this, 
        // we use null not undefined since JSON.stringify will ignore properties with undefined value
        _def = null;
        this._columns.forEach(function (col) {
            ctx._data[col] = ctx._cache[col] =
                col in _initialData ? _initialData[col] : _def;
        });
    }
    /**
     * Magic setter.
     *
     * @param column
     * @param value
     */
    _set(column, value) {
        if (Object.prototype.hasOwnProperty.call(this._data, column)) {
            this._data[column] = value;
        }
        return this;
    }
    /**
     * Checks if the entity is clean.
     */
    isClean() {
        return Object.keys(this.toObject(true)).length === 0;
    }
    /**
     * Checks if the entity is saved.
     *
     * @param set When true the entity will be considered as saved.
     */
    isSaved(set) {
        if (set) {
            this._cache = this.toObject();
            return true;
        }
        return this.isClean();
    }
    /**
     * Checks if the entity is being saved.
     *
     * @param set When true the state will be set to saving.
     */
    isSaving(set) {
        if (arguments.length) {
            this._state = set ? GoblEntityState.SAVING : GoblEntityState.UNKNOWN;
        }
        return this._state === GoblEntityState.SAVING;
    }
    /**
     * Checks if the entity is being deleted.
     *
     * @param set When true the state will be set to deleting.
     */
    isDeleting(set) {
        if (arguments.length) {
            this._state = set ? GoblEntityState.DELETING : GoblEntityState.UNKNOWN;
        }
        return this._state === GoblEntityState.DELETING;
    }
    /**
     * Checks if the entity is being updated.
     *
     * @param set When true the state will be set to updating.
     */
    isUpdating(set) {
        if (arguments.length) {
            this._state = set ? GoblEntityState.UPDATING : GoblEntityState.UNKNOWN;
        }
        return this._state === GoblEntityState.UPDATING;
    }
    /**
     * Hydrate the entity and set as saved when `save` is true
     */
    doHydrate(data, save = false) {
        const ctx = this, sourceOfTruth = this._data;
        Object.keys(data).forEach(function (k) {
            if (Object.prototype.hasOwnProperty.call(sourceOfTruth, k)) {
                ctx[k.slice(ctx._prefix.length + 1)] = data[k];
            }
        });
        if (save) {
            this.isSaved(true);
        }
        return this;
    }
    /**
     * Returns current data in a clean new object
     *
     * if `diff` is true, returns modified columns only
     */
    toObject(diff = false) {
        const o = {};
        const hasOwn = Object.prototype.hasOwnProperty;
        if (diff) {
            for (const prop in this._cache) {
                if (prop !== GOBL_ENTITY_MARKER &&
                    hasOwn.call(this._cache, prop) &&
                    this._cache[prop] !== this._data[prop]) {
                    o[prop] = this._data[prop];
                }
            }
            return o;
        }
        for (const prop in this._data) {
            if (hasOwn.call(this._data, prop)) {
                o[prop] = this._data[prop];
            }
        }
        // mark the object
        o[GOBL_ENTITY_MARKER] = this._name;
        return o;
    }
    /**
     * Returns some column values
     */
    toObjectSome(columns) {
        const o = {}, len = columns.length;
        for (let i = 0; i < len; i++) {
            const col = columns[i];
            if (Object.prototype.hasOwnProperty.call(this._data, col)) {
                o[col] = this._data[col];
            }
            else {
                throw new Error(`Column "${col}" is not defined in "${this._name}".`);
            }
        }
        return o;
    }
    /**
     * JSON helper
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Returns the entity cache key.
     *
     * `null` is returned when we can't have a valid cache key.
     */
    cacheKey() {
        const columns = this.identifierColumns().sort(), len = columns.length;
        let value = '', i = 0;
        if (len === 1) {
            value = this._data[columns[0]];
        }
        else {
            for (; i < len; i++) {
                const v = this._data[columns[i]];
                if (v != null) {
                    value += '|' + v;
                }
            }
        }
        return value || null;
    }
    /**
     * For backward compatibility
     */
    toInstance(data, cache = false) {
        return toInstance(data, cache);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR29ibEVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Hb2JsRW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWhGLElBQUssZUFLSjtBQUxELFdBQUssZUFBZTtJQUNuQiwyREFBTyxDQUFBO0lBQ1AseURBQU0sQ0FBQTtJQUNOLDZEQUFRLENBQUE7SUFDUiw2REFBUSxDQUFBO0FBQ1QsQ0FBQyxFQUxJLGVBQWUsS0FBZixlQUFlLFFBS25CO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsT0FBTyxPQUFnQixVQUFVO0lBT3JCO0lBQ0E7SUFDQTtJQVJDLEtBQUssR0FBUSxFQUFFLENBQUM7SUFDekIsTUFBTSxHQUFRLEVBQUUsQ0FBQztJQUNqQixNQUFNLEdBQW9CLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFFNUQsWUFDQyxlQUErQixFQUFFLEVBQ2hCLEtBQWEsRUFDYixPQUFlLEVBQ2YsUUFBa0I7UUFGbEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRW5DLE1BQU0sR0FBRyxHQUFHLElBQUk7UUFDZiw2RkFBNkY7UUFDN0YsSUFBSSxHQUFHLElBQUksQ0FBQztRQUViLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRztZQUNsQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO2dCQUMvQixHQUFHLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLElBQUksQ0FBQyxNQUFj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QUM7UUFDRixDQUFDO1FBRUQsT0FBTyxLQUFLLElBQUksSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILFVBQVUsQ0FBQyxJQUFvQixFQUFFLEtBQUssR0FBRyxLQUFLO1FBQzdDLE9BQU8sVUFBVSxDQUFPLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBTUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIEdvYmxFbnRpdHlEYXRhLCBHT0JMX0VOVElUWV9NQVJLRVIsIHRvSW5zdGFuY2UgfSBmcm9tICcuL2dvYmwuanMnO1xuXG5lbnVtIEdvYmxFbnRpdHlTdGF0ZSB7XG5cdFVOS05PV04sXG5cdFNBVklORyxcblx0REVMRVRJTkcsXG5cdFVQREFUSU5HLFxufVxuXG4vKipcbiAqIEdvYmxFbnRpdHkgY2xhc3MuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEdvYmxFbnRpdHkge1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2RhdGE6IGFueSA9IHt9O1xuXHRwcm90ZWN0ZWQgX2NhY2hlOiBhbnkgPSB7fTtcblx0cHJvdGVjdGVkIF9zdGF0ZTogR29ibEVudGl0eVN0YXRlID0gR29ibEVudGl0eVN0YXRlLlVOS05PV047XG5cblx0cHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuXHRcdF9pbml0aWFsRGF0YTogR29ibEVudGl0eURhdGEgPSB7fSxcblx0XHRwcml2YXRlIHJlYWRvbmx5IF9uYW1lOiBzdHJpbmcsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBfcHJlZml4OiBzdHJpbmcsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBfY29sdW1uczogc3RyaW5nW11cblx0KSB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcyxcblx0XHRcdC8vIHdlIHVzZSBudWxsIG5vdCB1bmRlZmluZWQgc2luY2UgSlNPTi5zdHJpbmdpZnkgd2lsbCBpZ25vcmUgcHJvcGVydGllcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZVxuXHRcdFx0X2RlZiA9IG51bGw7XG5cblx0XHR0aGlzLl9jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbCkge1xuXHRcdFx0Y3R4Ll9kYXRhW2NvbF0gPSBjdHguX2NhY2hlW2NvbF0gPVxuXHRcdFx0XHRjb2wgaW4gX2luaXRpYWxEYXRhID8gX2luaXRpYWxEYXRhW2NvbF0gOiBfZGVmO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1hZ2ljIHNldHRlci5cblx0ICpcblx0ICogQHBhcmFtIGNvbHVtblxuXHQgKiBAcGFyYW0gdmFsdWVcblx0ICovXG5cdHByb3RlY3RlZCBfc2V0KGNvbHVtbjogc3RyaW5nLCB2YWx1ZTogYW55KTogdGhpcyB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9kYXRhLCBjb2x1bW4pKSB7XG5cdFx0XHR0aGlzLl9kYXRhW2NvbHVtbl0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGVudGl0eSBpcyBjbGVhbi5cblx0ICovXG5cdGlzQ2xlYW4oKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudG9PYmplY3QodHJ1ZSkpLmxlbmd0aCA9PT0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGVudGl0eSBpcyBzYXZlZC5cblx0ICpcblx0ICogQHBhcmFtIHNldCBXaGVuIHRydWUgdGhlIGVudGl0eSB3aWxsIGJlIGNvbnNpZGVyZWQgYXMgc2F2ZWQuXG5cdCAqL1xuXHRpc1NhdmVkKHNldD86IGJvb2xlYW4pOiBib29sZWFuIHtcblx0XHRpZiAoc2V0KSB7XG5cdFx0XHR0aGlzLl9jYWNoZSA9IHRoaXMudG9PYmplY3QoKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzQ2xlYW4oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGVudGl0eSBpcyBiZWluZyBzYXZlZC5cblx0ICpcblx0ICogQHBhcmFtIHNldCBXaGVuIHRydWUgdGhlIHN0YXRlIHdpbGwgYmUgc2V0IHRvIHNhdmluZy5cblx0ICovXG5cdGlzU2F2aW5nKHNldD86IGJvb2xlYW4pOiBib29sZWFuIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5fc3RhdGUgPSBzZXQgPyBHb2JsRW50aXR5U3RhdGUuU0FWSU5HIDogR29ibEVudGl0eVN0YXRlLlVOS05PV047XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3N0YXRlID09PSBHb2JsRW50aXR5U3RhdGUuU0FWSU5HO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZW50aXR5IGlzIGJlaW5nIGRlbGV0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSBzZXQgV2hlbiB0cnVlIHRoZSBzdGF0ZSB3aWxsIGJlIHNldCB0byBkZWxldGluZy5cblx0ICovXG5cdGlzRGVsZXRpbmcoc2V0PzogYm9vbGVhbik6IGJvb2xlYW4ge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9zdGF0ZSA9IHNldCA/IEdvYmxFbnRpdHlTdGF0ZS5ERUxFVElORyA6IEdvYmxFbnRpdHlTdGF0ZS5VTktOT1dOO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gR29ibEVudGl0eVN0YXRlLkRFTEVUSU5HO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZW50aXR5IGlzIGJlaW5nIHVwZGF0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSBzZXQgV2hlbiB0cnVlIHRoZSBzdGF0ZSB3aWxsIGJlIHNldCB0byB1cGRhdGluZy5cblx0ICovXG5cdGlzVXBkYXRpbmcoc2V0PzogYm9vbGVhbik6IGJvb2xlYW4ge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9zdGF0ZSA9IHNldCA/IEdvYmxFbnRpdHlTdGF0ZS5VUERBVElORyA6IEdvYmxFbnRpdHlTdGF0ZS5VTktOT1dOO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gR29ibEVudGl0eVN0YXRlLlVQREFUSU5HO1xuXHR9XG5cblx0LyoqXG5cdCAqIEh5ZHJhdGUgdGhlIGVudGl0eSBhbmQgc2V0IGFzIHNhdmVkIHdoZW4gYHNhdmVgIGlzIHRydWVcblx0ICovXG5cdGRvSHlkcmF0ZShkYXRhOiBHb2JsRW50aXR5RGF0YSwgc2F2ZSA9IGZhbHNlKTogdGhpcyB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcyxcblx0XHRcdHNvdXJjZU9mVHJ1dGggPSB0aGlzLl9kYXRhO1xuXG5cdFx0T2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2VPZlRydXRoLCBrKSkge1xuXHRcdFx0XHQoY3R4IGFzIGFueSlbay5zbGljZShjdHguX3ByZWZpeC5sZW5ndGggKyAxKV0gPSBkYXRhW2tdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHNhdmUpIHtcblx0XHRcdHRoaXMuaXNTYXZlZCh0cnVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGN1cnJlbnQgZGF0YSBpbiBhIGNsZWFuIG5ldyBvYmplY3Rcblx0ICpcblx0ICogaWYgYGRpZmZgIGlzIHRydWUsIHJldHVybnMgbW9kaWZpZWQgY29sdW1ucyBvbmx5XG5cdCAqL1xuXHR0b09iamVjdChkaWZmID0gZmFsc2UpOiBHb2JsRW50aXR5RGF0YSB7XG5cdFx0Y29uc3QgbzogR29ibEVudGl0eURhdGEgPSB7fTtcblx0XHRjb25zdCBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cdFx0aWYgKGRpZmYpIHtcblx0XHRcdGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLl9jYWNoZSkge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cHJvcCAhPT0gR09CTF9FTlRJVFlfTUFSS0VSICYmXG5cdFx0XHRcdFx0aGFzT3duLmNhbGwodGhpcy5fY2FjaGUsIHByb3ApICYmXG5cdFx0XHRcdFx0dGhpcy5fY2FjaGVbcHJvcF0gIT09IHRoaXMuX2RhdGFbcHJvcF1cblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0b1twcm9wXSA9IHRoaXMuX2RhdGFbcHJvcF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLl9kYXRhKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwodGhpcy5fZGF0YSwgcHJvcCkpIHtcblx0XHRcdFx0b1twcm9wXSA9IHRoaXMuX2RhdGFbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gbWFyayB0aGUgb2JqZWN0XG5cdFx0b1tHT0JMX0VOVElUWV9NQVJLRVJdID0gdGhpcy5fbmFtZTtcblxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgc29tZSBjb2x1bW4gdmFsdWVzXG5cdCAqL1xuXHR0b09iamVjdFNvbWUoY29sdW1uczogc3RyaW5nW10pOiBHb2JsRW50aXR5RGF0YSB7XG5cdFx0Y29uc3QgbzogYW55ID0ge30sXG5cdFx0XHRsZW4gPSBjb2x1bW5zLmxlbmd0aDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGNvbnN0IGNvbCA9IGNvbHVtbnNbaV07XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX2RhdGEsIGNvbCkpIHtcblx0XHRcdFx0b1tjb2xdID0gdGhpcy5fZGF0YVtjb2xdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDb2x1bW4gXCIke2NvbH1cIiBpcyBub3QgZGVmaW5lZCBpbiBcIiR7dGhpcy5fbmFtZX1cIi5gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qKlxuXHQgKiBKU09OIGhlbHBlclxuXHQgKi9cblx0dG9KU09OKCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMudG9PYmplY3QoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlbnRpdHkgY2FjaGUga2V5LlxuXHQgKlxuXHQgKiBgbnVsbGAgaXMgcmV0dXJuZWQgd2hlbiB3ZSBjYW4ndCBoYXZlIGEgdmFsaWQgY2FjaGUga2V5LlxuXHQgKi9cblx0Y2FjaGVLZXkoKTogc3RyaW5nIHwgbnVsbCB7XG5cdFx0Y29uc3QgY29sdW1ucyA9IHRoaXMuaWRlbnRpZmllckNvbHVtbnMoKS5zb3J0KCksXG5cdFx0XHRsZW4gPSBjb2x1bW5zLmxlbmd0aDtcblx0XHRsZXQgdmFsdWUgPSAnJyxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKGxlbiA9PT0gMSkge1xuXHRcdFx0dmFsdWUgPSB0aGlzLl9kYXRhW2NvbHVtbnNbMF1dO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IHYgPSB0aGlzLl9kYXRhW2NvbHVtbnNbaV1dO1xuXHRcdFx0XHRpZiAodiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0dmFsdWUgKz0gJ3wnICsgdjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZSB8fCBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdCAqL1xuXHR0b0luc3RhbmNlKGRhdGE6IEdvYmxFbnRpdHlEYXRhLCBjYWNoZSA9IGZhbHNlKSB7XG5cdFx0cmV0dXJuIHRvSW5zdGFuY2U8dGhpcz4oZGF0YSwgY2FjaGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHByaW1hcnkga2V5cyBvZiB0aGUgZW50aXR5LlxuXHQgKi9cblx0YWJzdHJhY3QgaWRlbnRpZmllckNvbHVtbnMoKTogc3RyaW5nW107XG59XG4iXX0=