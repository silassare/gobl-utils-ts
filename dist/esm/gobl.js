export const GOBL_ENTITY_MARKER = '__gobl__';
const win = typeof window !== 'undefined' ? window : globalThis;
const gobl = (win.gobl = win.gobl || {}), goblCache = (gobl.goblCache =
    gobl.goblCache || new Map()), goblClassMagicMap = (gobl.goblClassMagicMap =
    gobl.goblClassMagicMap || new Map());
/**
 * Try to identify and instantiate the entity class that best matches the given data.
 *
 * @param data
 * @param includeCache
 */
export const toInstance = function (data, addToCache = false) {
    if (Object.prototype.toString.call(data) === '[object Object]') {
        let entityName = data[GOBL_ENTITY_MARKER], entityCtor, magicKey, old, e, cacheKey;
        if (entityName) {
            entityCtor = gobl[entityName];
        }
        if (!entityCtor) {
            // important: we remove the marker to keep only the columns as properties
            delete data[GOBL_ENTITY_MARKER];
            magicKey = makeEntityClassMagicKey(Object.keys(data));
            entityName = goblClassMagicMap.get(magicKey);
            if (entityName) {
                entityCtor = gobl[entityName];
            }
        }
        if (entityCtor) {
            e = new entityCtor(data);
            const cache = addToCache && entityName ? getEntityCache(entityName) : null;
            if (cache && (cacheKey = e.cacheKey())) {
                old = cache.get(cacheKey);
                if (old) {
                    e = old.doHydrate(data);
                }
                cache.set(cacheKey, e);
            }
            return e;
        }
    }
    return undefined;
};
const makeEntityClassMagicKey = (columns) => {
    return columns.sort().join('|');
};
export function register(name, entity) {
    const columnsAsKey = makeEntityClassMagicKey(entity.COLUMNS);
    gobl[name] = entity;
    goblCache.set(name, new Map());
    goblClassMagicMap.set(columnsAsKey, name);
}
export function getEntityCache(entityName) {
    return goblCache.get(entityName);
}
export function _bool(v) {
    return v === null || v === undefined ? v : Boolean(v === '0' ? 0 : v);
}
export function _int(v) {
    return v === null || v === undefined ? v : parseInt(v);
}
export function _string(v) {
    return v === null || v === undefined ? '' : String(v);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29ibC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nb2JsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQztBQVE3QyxNQUFNLEdBQUcsR0FBUSxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3JFLE1BQU0sSUFBSSxHQUFRLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUM1QyxTQUFTLEdBQXlDLENBQUMsSUFBSSxDQUFDLFNBQVM7SUFDaEUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQzdCLGlCQUFpQixHQUF3QixDQUFDLElBQUksQ0FBQyxpQkFBaUI7SUFDL0QsSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztBQUV2Qzs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUN6QixJQUFvQixFQUNwQixVQUFVLEdBQUcsS0FBSztJQUVsQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxpQkFBaUIsRUFBRSxDQUFDO1FBQ2hFLElBQUksVUFBVSxHQUF1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFDNUQsVUFBVSxFQUNWLFFBQVEsRUFDUixHQUFrQixFQUNsQixDQUFJLEVBQ0osUUFBUSxDQUFDO1FBRVYsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNoQixVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDakIseUVBQXlFO1lBQ3pFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFaEMsUUFBUSxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0RCxVQUFVLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRTdDLElBQUksVUFBVSxFQUFFLENBQUM7Z0JBQ2hCLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0IsQ0FBQztRQUNGLENBQUM7UUFFRCxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2hCLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixNQUFNLEtBQUssR0FDVixVQUFVLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVqRSxJQUFJLEtBQUssSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUN4QyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDVCxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekIsQ0FBQztnQkFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4QixDQUFDO1lBRUQsT0FBTyxDQUFNLENBQUM7UUFDZixDQUFDO0lBQ0YsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxPQUFpQixFQUFVLEVBQUU7SUFDN0QsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxRQUFRLENBQUMsSUFBWSxFQUFFLE1BQXlCO0lBQy9ELE1BQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFFLE1BQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0RSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3BCLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvQixpQkFBaUIsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM3QixVQUFrQjtJQUVsQixPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUErQixDQUFDO0FBQ2hFLENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLENBQU07SUFDM0IsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sVUFBVSxJQUFJLENBQUMsQ0FBTTtJQUMxQixPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsQ0FBTTtJQUM3QixPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHb2JsRW50aXR5IGZyb20gJy4vR29ibEVudGl0eS5qcyc7XG5cbmV4cG9ydCBjb25zdCBHT0JMX0VOVElUWV9NQVJLRVIgPSAnX19nb2JsX18nO1xuXG5leHBvcnQgdHlwZSBHb2JsRW50aXR5RGF0YSA9IHtcblx0W2tleSBpbiB0eXBlb2YgR09CTF9FTlRJVFlfTUFSS0VSXT86IHN0cmluZztcbn0gJiB7XG5cdFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5cbmNvbnN0IHdpbjogYW55ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWxUaGlzO1xuY29uc3QgZ29ibDogYW55ID0gKHdpbi5nb2JsID0gd2luLmdvYmwgfHwge30pLFxuXHRnb2JsQ2FjaGU6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIEdvYmxFbnRpdHk+PiA9IChnb2JsLmdvYmxDYWNoZSA9XG5cdFx0Z29ibC5nb2JsQ2FjaGUgfHwgbmV3IE1hcCgpKSxcblx0Z29ibENsYXNzTWFnaWNNYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSAoZ29ibC5nb2JsQ2xhc3NNYWdpY01hcCA9XG5cdFx0Z29ibC5nb2JsQ2xhc3NNYWdpY01hcCB8fCBuZXcgTWFwKCkpO1xuXG4vKipcbiAqIFRyeSB0byBpZGVudGlmeSBhbmQgaW5zdGFudGlhdGUgdGhlIGVudGl0eSBjbGFzcyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgZ2l2ZW4gZGF0YS5cbiAqXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIGluY2x1ZGVDYWNoZVxuICovXG5leHBvcnQgY29uc3QgdG9JbnN0YW5jZSA9IGZ1bmN0aW9uIDxUIGV4dGVuZHMgR29ibEVudGl0eSA9IEdvYmxFbnRpdHk+KFxuXHRkYXRhOiBHb2JsRW50aXR5RGF0YSxcblx0YWRkVG9DYWNoZSA9IGZhbHNlXG4pOiBUIHwgdW5kZWZpbmVkIHtcblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRsZXQgZW50aXR5TmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gZGF0YVtHT0JMX0VOVElUWV9NQVJLRVJdLFxuXHRcdFx0ZW50aXR5Q3Rvcixcblx0XHRcdG1hZ2ljS2V5LFxuXHRcdFx0b2xkOiBUIHwgdW5kZWZpbmVkLFxuXHRcdFx0ZTogVCxcblx0XHRcdGNhY2hlS2V5O1xuXG5cdFx0aWYgKGVudGl0eU5hbWUpIHtcblx0XHRcdGVudGl0eUN0b3IgPSBnb2JsW2VudGl0eU5hbWVdO1xuXHRcdH1cblxuXHRcdGlmICghZW50aXR5Q3Rvcikge1xuXHRcdFx0Ly8gaW1wb3J0YW50OiB3ZSByZW1vdmUgdGhlIG1hcmtlciB0byBrZWVwIG9ubHkgdGhlIGNvbHVtbnMgYXMgcHJvcGVydGllc1xuXHRcdFx0ZGVsZXRlIGRhdGFbR09CTF9FTlRJVFlfTUFSS0VSXTtcblxuXHRcdFx0bWFnaWNLZXkgPSBtYWtlRW50aXR5Q2xhc3NNYWdpY0tleShPYmplY3Qua2V5cyhkYXRhKSk7XG5cdFx0XHRlbnRpdHlOYW1lID0gZ29ibENsYXNzTWFnaWNNYXAuZ2V0KG1hZ2ljS2V5KTtcblxuXHRcdFx0aWYgKGVudGl0eU5hbWUpIHtcblx0XHRcdFx0ZW50aXR5Q3RvciA9IGdvYmxbZW50aXR5TmFtZV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGVudGl0eUN0b3IpIHtcblx0XHRcdGUgPSBuZXcgZW50aXR5Q3RvcihkYXRhKTtcblx0XHRcdGNvbnN0IGNhY2hlID1cblx0XHRcdFx0YWRkVG9DYWNoZSAmJiBlbnRpdHlOYW1lID8gZ2V0RW50aXR5Q2FjaGU8VD4oZW50aXR5TmFtZSkgOiBudWxsO1xuXG5cdFx0XHRpZiAoY2FjaGUgJiYgKGNhY2hlS2V5ID0gZS5jYWNoZUtleSgpKSkge1xuXHRcdFx0XHRvbGQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuXHRcdFx0XHRpZiAob2xkKSB7XG5cdFx0XHRcdFx0ZSA9IG9sZC5kb0h5ZHJhdGUoZGF0YSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWNoZS5zZXQoY2FjaGVLZXksIGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZSBhcyBUO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBtYWtlRW50aXR5Q2xhc3NNYWdpY0tleSA9IChjb2x1bW5zOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG5cdHJldHVybiBjb2x1bW5zLnNvcnQoKS5qb2luKCd8Jyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIobmFtZTogc3RyaW5nLCBlbnRpdHk6IHR5cGVvZiBHb2JsRW50aXR5KSB7XG5cdGNvbnN0IGNvbHVtbnNBc0tleSA9IG1ha2VFbnRpdHlDbGFzc01hZ2ljS2V5KChlbnRpdHkgYXMgYW55KS5DT0xVTU5TKTtcblxuXHRnb2JsW25hbWVdID0gZW50aXR5O1xuXHRnb2JsQ2FjaGUuc2V0KG5hbWUsIG5ldyBNYXAoKSk7XG5cdGdvYmxDbGFzc01hZ2ljTWFwLnNldChjb2x1bW5zQXNLZXksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW50aXR5Q2FjaGU8VCBleHRlbmRzIEdvYmxFbnRpdHkgPSBHb2JsRW50aXR5Pihcblx0ZW50aXR5TmFtZTogc3RyaW5nXG4pIHtcblx0cmV0dXJuIGdvYmxDYWNoZS5nZXQoZW50aXR5TmFtZSkgYXMgTWFwPHN0cmluZywgVD4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfYm9vbCh2OiBhbnkpOiBib29sZWFuIHtcblx0cmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkID8gdiA6IEJvb2xlYW4odiA9PT0gJzAnID8gMCA6IHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2ludCh2OiBhbnkpOiBudW1iZXIge1xuXHRyZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyB2IDogcGFyc2VJbnQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfc3RyaW5nKHY6IGFueSk6IHN0cmluZyB7XG5cdHJldHVybiB2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCA/ICcnIDogU3RyaW5nKHYpO1xufVxuIl19