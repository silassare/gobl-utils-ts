"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._string = exports._int = exports._bool = exports.getEntityCache = exports.register = exports.toInstance = exports.goblClassMagicMap = exports.goblCache = exports.goblMarker = exports.gobl = void 0;
const win = window;
const 
/**
 * Try to identify and instantiate the entity class that best matches the given data.
 *
 * @param data
 * @param cache
 */
toInstance = function (data, cache = false) {
    if (Object.prototype.toString.call(data) === '[object Object]') {
        let entityName = data[exports.goblMarker], entity, magic, old, e, cacheKey;
        if (entityName) {
            entity = exports.gobl[entityName];
            // maybe the entity name change
            // this is to have a clean object
            delete data[exports.goblMarker];
        }
        if (!entity) {
            magic = Object.keys(data).sort().join('');
            entityName = exports.goblClassMagicMap[magic];
            if (entityName) {
                entity = exports.gobl[entityName];
            }
        }
        if (entity) {
            e = new entity(data);
            if (cache && (cacheKey = e.cacheKey())) {
                old = exports.goblCache[entityName][cacheKey];
                if (old) {
                    e = old.doHydrate(data);
                }
                exports.goblCache[entityName][cacheKey] = e;
            }
            return e;
        }
    }
    return undefined;
};
exports.gobl = (win.gobl = win.gobl || {}), exports.goblMarker = '__gobl__', exports.goblCache = (exports.gobl.goblCache = exports.gobl.goblCache || {}), exports.goblClassMagicMap = (exports.gobl.goblClassMagicMap = exports.gobl.goblClassMagicMap || {}), 
/**
 * Try to identify and instantiate the entity class that best matches the given data.
 *
 * @param data
 * @param cache
 */
exports.toInstance = toInstance;
const register = function (name, entity) {
    exports.gobl[name] = entity;
    exports.goblCache[name] = {};
    exports.goblClassMagicMap[entity.COLUMNS.sort().join('')] = name;
};
exports.register = register;
const getEntityCache = (entityName) => exports.goblCache[entityName];
exports.getEntityCache = getEntityCache;
const _bool = (v) => {
    return v === null || v === undefined ? v : Boolean(v === '0' ? 0 : v);
};
exports._bool = _bool;
const _int = (v) => {
    return v === null || v === undefined ? v : parseInt(v);
};
exports._int = _int;
const _string = (v) => {
    return v === null || v === undefined ? '' : String(v);
};
exports._string = _string;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29ibC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nb2JsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQU0sR0FBRyxHQUFRLE1BQU0sQ0FBQztBQUNqQjtBQVFOOzs7OztHQUtHO0FBQ0gsVUFBVSxHQUFHLFVBQ1osSUFBb0IsRUFDcEIsS0FBSyxHQUFHLEtBQUs7SUFFYixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxpQkFBaUIsRUFBRSxDQUFDO1FBQ2hFLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxrQkFBVSxDQUFDLEVBQ2hDLE1BQU0sRUFDTixLQUFLLEVBQ0wsR0FBZSxFQUNmLENBQWEsRUFDYixRQUFRLENBQUM7UUFFVixJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2hCLE1BQU0sR0FBRyxZQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUIsK0JBQStCO1lBQy9CLGlDQUFpQztZQUNqQyxPQUFPLElBQUksQ0FBQyxrQkFBVSxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNiLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQyxVQUFVLEdBQUcseUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFdEMsSUFBSSxVQUFVLEVBQUUsQ0FBQztnQkFDaEIsTUFBTSxHQUFHLFlBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzQixDQUFDO1FBQ0YsQ0FBQztRQUVELElBQUksTUFBTSxFQUFFLENBQUM7WUFDWixDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDeEMsR0FBRyxHQUFHLGlCQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksR0FBRyxFQUFFLENBQUM7b0JBQ1QsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pCLENBQUM7Z0JBRUQsaUJBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckMsQ0FBQztZQUVELE9BQU8sQ0FBTSxDQUFDO1FBQ2YsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDLENBQUM7QUExRFUsUUFBQSxJQUFJLEdBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQ25ELFFBQUEsVUFBVSxHQUFHLFVBQVUsRUFDdkIsUUFBQSxTQUFTLEdBRUwsQ0FBQyxZQUFJLENBQUMsU0FBUyxHQUFHLFlBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQzNDLFFBQUEsaUJBQWlCLEdBRWIsQ0FBQyxZQUFJLENBQUMsaUJBQWlCLEdBQUcsWUFBSSxDQUFDLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztBQUMzRDs7Ozs7R0FLRztBQUNILFFBQUEsVUFBVSxjQTRDUjtBQUVJLE1BQU0sUUFBUSxHQUFHLFVBQVUsSUFBWSxFQUFFLE1BQXlCO0lBQ3hFLFlBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDcEIsaUJBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckIseUJBQWlCLENBQUUsTUFBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbkUsQ0FBQyxDQUFDO0FBSlcsUUFBQSxRQUFRLFlBSW5CO0FBRUssTUFBTSxjQUFjLEdBQUcsQ0FBQyxVQUFrQixFQUFFLEVBQUUsQ0FBQyxpQkFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQS9ELFFBQUEsY0FBYyxrQkFBaUQ7QUFFckUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFNLEVBQVcsRUFBRTtJQUN4QyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUM7QUFGVyxRQUFBLEtBQUssU0FFaEI7QUFFSyxNQUFNLElBQUksR0FBRyxDQUFDLENBQU0sRUFBVSxFQUFFO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFGVyxRQUFBLElBQUksUUFFZjtBQUVLLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBTSxFQUFVLEVBQUU7SUFDekMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUZXLFFBQUEsT0FBTyxXQUVsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHb2JsRW50aXR5LCB7IHR5cGUgR29ibEVudGl0eURhdGEgfSBmcm9tICcuL0dvYmxFbnRpdHkuanMnO1xuXG5jb25zdCB3aW46IGFueSA9IHdpbmRvdztcbmV4cG9ydCBjb25zdCBnb2JsOiBhbnkgPSAod2luLmdvYmwgPSB3aW4uZ29ibCB8fCB7fSksXG5cdGdvYmxNYXJrZXIgPSAnX19nb2JsX18nLFxuXHRnb2JsQ2FjaGU6IHtcblx0XHRbZW50aXR5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IEdvYmxFbnRpdHkgfTtcblx0fSA9IChnb2JsLmdvYmxDYWNoZSA9IGdvYmwuZ29ibENhY2hlIHx8IHt9KSxcblx0Z29ibENsYXNzTWFnaWNNYXA6IHtcblx0XHRba2V5OiBzdHJpbmddOiBzdHJpbmc7XG5cdH0gPSAoZ29ibC5nb2JsQ2xhc3NNYWdpY01hcCA9IGdvYmwuZ29ibENsYXNzTWFnaWNNYXAgfHwge30pLFxuXHQvKipcblx0ICogVHJ5IHRvIGlkZW50aWZ5IGFuZCBpbnN0YW50aWF0ZSB0aGUgZW50aXR5IGNsYXNzIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBnaXZlbiBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0gZGF0YVxuXHQgKiBAcGFyYW0gY2FjaGVcblx0ICovXG5cdHRvSW5zdGFuY2UgPSBmdW5jdGlvbiA8VCBleHRlbmRzIEdvYmxFbnRpdHkgPSBHb2JsRW50aXR5Pihcblx0XHRkYXRhOiBHb2JsRW50aXR5RGF0YSxcblx0XHRjYWNoZSA9IGZhbHNlXG5cdCk6IFQgfCB1bmRlZmluZWQge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0XHRsZXQgZW50aXR5TmFtZSA9IGRhdGFbZ29ibE1hcmtlcl0sXG5cdFx0XHRcdGVudGl0eSxcblx0XHRcdFx0bWFnaWMsXG5cdFx0XHRcdG9sZDogR29ibEVudGl0eSxcblx0XHRcdFx0ZTogR29ibEVudGl0eSxcblx0XHRcdFx0Y2FjaGVLZXk7XG5cblx0XHRcdGlmIChlbnRpdHlOYW1lKSB7XG5cdFx0XHRcdGVudGl0eSA9IGdvYmxbZW50aXR5TmFtZV07XG5cdFx0XHRcdC8vIG1heWJlIHRoZSBlbnRpdHkgbmFtZSBjaGFuZ2Vcblx0XHRcdFx0Ly8gdGhpcyBpcyB0byBoYXZlIGEgY2xlYW4gb2JqZWN0XG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2dvYmxNYXJrZXJdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWVudGl0eSkge1xuXHRcdFx0XHRtYWdpYyA9IE9iamVjdC5rZXlzKGRhdGEpLnNvcnQoKS5qb2luKCcnKTtcblx0XHRcdFx0ZW50aXR5TmFtZSA9IGdvYmxDbGFzc01hZ2ljTWFwW21hZ2ljXTtcblxuXHRcdFx0XHRpZiAoZW50aXR5TmFtZSkge1xuXHRcdFx0XHRcdGVudGl0eSA9IGdvYmxbZW50aXR5TmFtZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGVudGl0eSkge1xuXHRcdFx0XHRlID0gbmV3IGVudGl0eShkYXRhKTtcblx0XHRcdFx0aWYgKGNhY2hlICYmIChjYWNoZUtleSA9IGUuY2FjaGVLZXkoKSkpIHtcblx0XHRcdFx0XHRvbGQgPSBnb2JsQ2FjaGVbZW50aXR5TmFtZV1bY2FjaGVLZXldO1xuXHRcdFx0XHRcdGlmIChvbGQpIHtcblx0XHRcdFx0XHRcdGUgPSBvbGQuZG9IeWRyYXRlKGRhdGEpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdvYmxDYWNoZVtlbnRpdHlOYW1lXVtjYWNoZUtleV0gPSBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGUgYXMgVDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9O1xuXG5leHBvcnQgY29uc3QgcmVnaXN0ZXIgPSBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBlbnRpdHk6IHR5cGVvZiBHb2JsRW50aXR5KSB7XG5cdGdvYmxbbmFtZV0gPSBlbnRpdHk7XG5cdGdvYmxDYWNoZVtuYW1lXSA9IHt9O1xuXHRnb2JsQ2xhc3NNYWdpY01hcFsoZW50aXR5IGFzIGFueSkuQ09MVU1OUy5zb3J0KCkuam9pbignJyldID0gbmFtZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFbnRpdHlDYWNoZSA9IChlbnRpdHlOYW1lOiBzdHJpbmcpID0+IGdvYmxDYWNoZVtlbnRpdHlOYW1lXTtcblxuZXhwb3J0IGNvbnN0IF9ib29sID0gKHY6IGFueSk6IGJvb2xlYW4gPT4ge1xuXHRyZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyB2IDogQm9vbGVhbih2ID09PSAnMCcgPyAwIDogdik7XG59O1xuXG5leHBvcnQgY29uc3QgX2ludCA9ICh2OiBhbnkpOiBudW1iZXIgPT4ge1xuXHRyZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyB2IDogcGFyc2VJbnQodik7XG59O1xuXG5leHBvcnQgY29uc3QgX3N0cmluZyA9ICh2OiBhbnkpOiBzdHJpbmcgPT4ge1xuXHRyZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyh2KTtcbn07XG4iXX0=