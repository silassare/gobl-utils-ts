"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toInstance = exports.GOBL_ENTITY_MARKER = void 0;
exports.register = register;
exports.getEntityCache = getEntityCache;
exports._bool = _bool;
exports._int = _int;
exports._string = _string;
exports.GOBL_ENTITY_MARKER = '__gobl__';
const win = typeof window !== 'undefined' ? window : globalThis;
const gobl = (win.gobl = win.gobl || {}), goblCache = (gobl.goblCache =
    gobl.goblCache || new Map()), goblClassMagicMap = (gobl.goblClassMagicMap =
    gobl.goblClassMagicMap || new Map());
/**
 * Try to identify and instantiate the entity class that best matches the given data.
 *
 * @param data
 * @param includeCache
 */
const toInstance = function (data, addToCache = false) {
    if (Object.prototype.toString.call(data) === '[object Object]') {
        let entityName = data[exports.GOBL_ENTITY_MARKER], entityCtor, magicKey, old, e, cacheKey;
        if (entityName) {
            entityCtor = gobl[entityName];
        }
        if (!entityCtor) {
            // important: we remove the marker to keep only the columns as properties
            delete data[exports.GOBL_ENTITY_MARKER];
            magicKey = makeEntityClassMagicKey(Object.keys(data));
            entityName = goblClassMagicMap.get(magicKey);
            if (entityName) {
                entityCtor = gobl[entityName];
            }
        }
        if (entityCtor) {
            e = new entityCtor(data);
            const cache = addToCache && entityName ? getEntityCache(entityName) : null;
            if (cache && (cacheKey = e.cacheKey())) {
                old = cache.get(cacheKey);
                if (old) {
                    e = old.doHydrate(data);
                }
                cache.set(cacheKey, e);
            }
            return e;
        }
    }
    return undefined;
};
exports.toInstance = toInstance;
const makeEntityClassMagicKey = (columns) => {
    return columns.sort().join('|');
};
function register(name, entity) {
    const columnsAsKey = makeEntityClassMagicKey(entity.COLUMNS);
    gobl[name] = entity;
    goblCache.set(name, new Map());
    goblClassMagicMap.set(columnsAsKey, name);
}
function getEntityCache(entityName) {
    return goblCache.get(entityName);
}
function _bool(v) {
    return v === null || v === undefined ? v : Boolean(v === '0' ? 0 : v);
}
function _int(v) {
    return v === null || v === undefined ? v : parseInt(v);
}
function _string(v) {
    return v === null || v === undefined ? '' : String(v);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29ibC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nb2JsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTRFQSw0QkFNQztBQUVELHdDQUlDO0FBRUQsc0JBRUM7QUFFRCxvQkFFQztBQUVELDBCQUVDO0FBbEdZLFFBQUEsa0JBQWtCLEdBQUcsVUFBVSxDQUFDO0FBUTdDLE1BQU0sR0FBRyxHQUFRLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDckUsTUFBTSxJQUFJLEdBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQzVDLFNBQVMsR0FBeUMsQ0FBQyxJQUFJLENBQUMsU0FBUztJQUNoRSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsRUFDN0IsaUJBQWlCLEdBQXdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtJQUMvRCxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBRXZDOzs7OztHQUtHO0FBQ0ksTUFBTSxVQUFVLEdBQUcsVUFDekIsSUFBb0IsRUFDcEIsVUFBVSxHQUFHLEtBQUs7SUFFbEIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssaUJBQWlCLEVBQUUsQ0FBQztRQUNoRSxJQUFJLFVBQVUsR0FBdUIsSUFBSSxDQUFDLDBCQUFrQixDQUFDLEVBQzVELFVBQVUsRUFDVixRQUFRLEVBQ1IsR0FBa0IsRUFDbEIsQ0FBSSxFQUNKLFFBQVEsQ0FBQztRQUVWLElBQUksVUFBVSxFQUFFLENBQUM7WUFDaEIsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2pCLHlF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O1xuXG5leHBvcnQgY29uc3QgR09CTF9FTlRJVFlfTUFSS0VSID0gJ19fZ29ibF9fJztcblxuZXhwb3J0IHR5cGUgR29ibEVudGl0eURhdGEgPSB7XG5cdFtrZXkgaW4gdHlwZW9mIEdPQkxfRU5USVRZX01BUktFUl0/OiBzdHJpbmc7XG59ICYge1xuXHRba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuXG5jb25zdCB3aW46IGFueSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsVGhpcztcbmNvbnN0IGdvYmw6IGFueSA9ICh3aW4uZ29ibCA9IHdpbi5nb2JsIHx8IHt9KSxcblx0Z29ibENhY2hlOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBHb2JsRW50aXR5Pj4gPSAoZ29ibC5nb2JsQ2FjaGUgPVxuXHRcdGdvYmwuZ29ibENhY2hlIHx8IG5ldyBNYXAoKSksXG5cdGdvYmxDbGFzc01hZ2ljTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gKGdvYmwuZ29ibENsYXNzTWFnaWNNYXAgPVxuXHRcdGdvYmwuZ29ibENsYXNzTWFnaWNNYXAgfHwgbmV3IE1hcCgpKTtcblxuLyoqXG4gKiBUcnkgdG8gaWRlbnRpZnkgYW5kIGluc3RhbnRpYXRlIHRoZSBlbnRpdHkgY2xhc3MgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGdpdmVuIGRhdGEuXG4gKlxuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBpbmNsdWRlQ2FjaGVcbiAqL1xuZXhwb3J0IGNvbnN0IHRvSW5zdGFuY2UgPSBmdW5jdGlvbiA8VCBleHRlbmRzIEdvYmxFbnRpdHkgPSBHb2JsRW50aXR5Pihcblx0ZGF0YTogR29ibEVudGl0eURhdGEsXG5cdGFkZFRvQ2FjaGUgPSBmYWxzZVxuKTogVCB8IHVuZGVmaW5lZCB7XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0bGV0IGVudGl0eU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGRhdGFbR09CTF9FTlRJVFlfTUFSS0VSXSxcblx0XHRcdGVudGl0eUN0b3IsXG5cdFx0XHRtYWdpY0tleSxcblx0XHRcdG9sZDogVCB8IHVuZGVmaW5lZCxcblx0XHRcdGU6IFQsXG5cdFx0XHRjYWNoZUtleTtcblxuXHRcdGlmIChlbnRpdHlOYW1lKSB7XG5cdFx0XHRlbnRpdHlDdG9yID0gZ29ibFtlbnRpdHlOYW1lXTtcblx0XHR9XG5cblx0XHRpZiAoIWVudGl0eUN0b3IpIHtcblx0XHRcdC8vIGltcG9ydGFudDogd2UgcmVtb3ZlIHRoZSBtYXJrZXIgdG8ga2VlcCBvbmx5IHRoZSBjb2x1bW5zIGFzIHByb3BlcnRpZXNcblx0XHRcdGRlbGV0ZSBkYXRhW0dPQkxfRU5USVRZX01BUktFUl07XG5cblx0XHRcdG1hZ2ljS2V5ID0gbWFrZUVudGl0eUNsYXNzTWFnaWNLZXkoT2JqZWN0LmtleXMoZGF0YSkpO1xuXHRcdFx0ZW50aXR5TmFtZSA9IGdvYmxDbGFzc01hZ2ljTWFwLmdldChtYWdpY0tleSk7XG5cblx0XHRcdGlmIChlbnRpdHlOYW1lKSB7XG5cdFx0XHRcdGVudGl0eUN0b3IgPSBnb2JsW2VudGl0eU5hbWVdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChlbnRpdHlDdG9yKSB7XG5cdFx0XHRlID0gbmV3IGVudGl0eUN0b3IoZGF0YSk7XG5cdFx0XHRjb25zdCBjYWNoZSA9XG5cdFx0XHRcdGFkZFRvQ2FjaGUgJiYgZW50aXR5TmFtZSA/IGdldEVudGl0eUNhY2hlPFQ+KGVudGl0eU5hbWUpIDogbnVsbDtcblxuXHRcdFx0aWYgKGNhY2hlICYmIChjYWNoZUtleSA9IGUuY2FjaGVLZXkoKSkpIHtcblx0XHRcdFx0b2xkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblx0XHRcdFx0aWYgKG9sZCkge1xuXHRcdFx0XHRcdGUgPSBvbGQuZG9IeWRyYXRlKGRhdGEpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGUuc2V0KGNhY2hlS2V5LCBlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGUgYXMgVDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29uc3QgbWFrZUVudGl0eUNsYXNzTWFnaWNLZXkgPSAoY29sdW1uczogc3RyaW5nW10pOiBzdHJpbmcgPT4ge1xuXHRyZXR1cm4gY29sdW1ucy5zb3J0KCkuam9pbignfCcpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWU6IHN0cmluZywgZW50aXR5OiB0eXBlb2YgR29ibEVudGl0eSkge1xuXHRjb25zdCBjb2x1bW5zQXNLZXkgPSBtYWtlRW50aXR5Q2xhc3NNYWdpY0tleSgoZW50aXR5IGFzIGFueSkuQ09MVU1OUyk7XG5cblx0Z29ibFtuYW1lXSA9IGVudGl0eTtcblx0Z29ibENhY2hlLnNldChuYW1lLCBuZXcgTWFwKCkpO1xuXHRnb2JsQ2xhc3NNYWdpY01hcC5zZXQoY29sdW1uc0FzS2V5LCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGl0eUNhY2hlPFQgZXh0ZW5kcyBHb2JsRW50aXR5ID0gR29ibEVudGl0eT4oXG5cdGVudGl0eU5hbWU6IHN0cmluZ1xuKSB7XG5cdHJldHVybiBnb2JsQ2FjaGUuZ2V0KGVudGl0eU5hbWUpIGFzIE1hcDxzdHJpbmcsIFQ+IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Jvb2wodjogYW55KTogYm9vbGVhbiB7XG5cdHJldHVybiB2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCA/IHYgOiBCb29sZWFuKHYgPT09ICcwJyA/IDAgOiB2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pbnQodjogYW55KTogbnVtYmVyIHtcblx0cmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkID8gdiA6IHBhcnNlSW50KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3N0cmluZyh2OiBhbnkpOiBzdHJpbmcge1xuXHRyZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyh2KTtcbn1cbiJdfQ==